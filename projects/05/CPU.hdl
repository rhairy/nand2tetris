// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
		// Wire
		Wire(in=instruction[15], out=msb);
		Wire(in=instruction[12], out=a);
		Wire(in=instruction[11], out=zx);
		Wire(in=instruction[10], out=nx);
		Wire(in=instruction[9], out=zy);
		Wire(in=instruction[8], out=ny);
		Wire(in=instruction[7], out=f);
		Wire(in=instruction[6], out=no);
		Wire(in=instruction[5], out=d1);
		Wire(in=instruction[4], out=d2);
		Wire(in=instruction[3], out=d3);
		Wire(in=instruction[2], out=j1);
		Wire(in=instruction[1], out=j2);
		Wire(in=instruction[0], out=j3);
		
		// Mux0
		Mux16(a=instruction, b=aluOut, sel=d1, out=mux0Out);
		// Mux1
		Mux16(a=regAOut, b=inM, sel=a, out=mux1Out);
		// A register
		Not(in=msb, out=msbNot);
		Or(a=d1, b=msbNot, out=regALoad);
		Register(in=mux0Out, load=regALoad, out=regAOut, out[0..14]=addressM);
		// D Register
		Register(in=aluOut, load=d2, out=regDOut);
		// PC
		Nand(a=msb, b=jmp, out=pcInc);
		PC(in=regAOut, load=jmp, inc=pcInc, reset=reset, out[0..14]=pc);
		// ALU
		ALU(zx=zx, nx=instruction[5], zy=zy, ny=ny, f=f, no=no, out=outM, out=aluOut, zr=aluZr, ng=aluNg);
		
		// computer the opposites of the alu output.
		Not(in=aluZr, out=aluZrNot);
		Not(in=aluNg, out=aluNgNot);
		
		// jgt
		And(a=j3, b=aluZrNot, out=tmp0);
		And(a=tmp0, b=aluNgNot, out=jgt);
		
		// jeq
		And(a=j2, b=aluZr, out=jeq);
		
		// jlt
		And(a=j1, b=aluNg, out=jlt);
		
		Or(a=jgt, b=jeq, out=tmp1);
		Or(a=tmp1, b=jlt, out=tmp2);
		And(a=tmp2, b=msb, out=jmp);
		
		Not(in=jmp, out=jmpNot);
}